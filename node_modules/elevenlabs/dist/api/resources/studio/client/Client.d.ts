/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../../index";
import { Projects } from "../resources/projects/client/Client";
import { Chapters } from "../resources/chapters/client/Client";
export declare namespace Studio {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Studio {
    protected readonly _options: Studio.Options;
    protected _projects: Projects | undefined;
    protected _chapters: Chapters | undefined;
    constructor(_options?: Studio.Options);
    get projects(): Projects;
    get chapters(): Chapters;
    /**
     * Create and auto-convert a podcast project. Currently, the LLM cost is covered by us but you will still be charged for the audio generation. In the future, you will be charged for both the LLM and audio generation costs.
     *
     * @param {ElevenLabs.BodyCreatePodcastV1StudioPodcastsPost} request
     * @param {Studio.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.createPodcast({
     *         model_id: "model_id",
     *         mode: {
     *             type: "conversation",
     *             conversation: {
     *                 host_voice_id: "host_voice_id",
     *                 guest_voice_id: "guest_voice_id"
     *             }
     *         },
     *         source: {
     *             text: "text"
     *         }
     *     })
     */
    createPodcast(request: ElevenLabs.BodyCreatePodcastV1StudioPodcastsPost, requestOptions?: Studio.RequestOptions): Promise<ElevenLabs.PodcastProjectResponseModel>;
}
